{"version":3,"sources":["utilities/myLibrary.js","components/CodeText.js","assets/logo.png","components/Operand.js","components/Operands.js","components/Operator.js","components/Operations.js","components/Explanation.js","components/App.js","serviceWorker.js","reportWebVitals.js","index.js"],"names":["constructDataListTable","aSimdDescriptionFile","intrinsic","map","e","parameter","hasOwnProperty","objectDescription","line1","_rettype","_name","Array","isArray","flatMap","i","length","_type","_varname","join","line2","header","instruction","_form","CPUID","line3","description","line4","operation","replaceAll","computeOperandsAndresultElt","obj","name","regTypeNumber","arrayOfMinimunSizeInDescription","match","sizeOfScalarField","Math","min","maxSize","result","retType","retTypeNumber","size","operands","varnames","types","find","forEach","element","k","split","operandNumber","operand","operandSize","range","start","stop","step","from","_","operandsAndResults","simdFunction","constInitialLinkingIndexInstruction","instructionName","o","replaceOperandInMessage","aMessage","reshapedMessage","replace","p1","p2","offset","string","readLinkingIndexMsg","aLinkingIndex","Msge","indexOfactive","findIndex","console","log","slice","flat","sort","a","b","reduce","pre","cur","findCurrentInstructionByName","tableOfInstrinsicsInstructions","myDataListTab","myLib","options","value","CodeText","ex","props","handleOnchange","this","className","htmlFor","type","id","autoComplete","aria-label","list","defaultValue","onChange","isVisible","Component","Operand","prevProps","prevState","snapshot","accumulator","currentValue","rank","xOperand0","xPrefixWidth","gOperand","j","toLowerCase","onClick","evt","handleOperandClick","y","x","width","height","dy","dx","rectOperandHeight","dominantBaseline","textAnchor","String","fromCharCode","varName","varType","Operands","currentInstruction","currentInstructionMember","transform","translation","operators","Operator","rectOprHeight","xOpr0","gOperator","handleOperatorClick","Operations","version","xmlns","xmlnsXlink","linkingIndex","alphabethLetters","charCodeAt","optionOfT","arrayOfT","optionsType","acc","indexOf","Explanation","currentResult","butonMsg","availableLetters","filter","includes","availableName","deletedName","optionsName","canBeDeletedName","optionNameToDelete","canBeDeletedRank","optionRankToDelete","canBeInsertRank","msgToUser","Name","optionRankToInsert","dimension","optionDimension","insertField","form","required","handleTypeOfOperandChange","handleNameOfOperandChange","handleRankOfOperandChange","handleDimensionOfOperandChange","deleteField","clickedButton","deletedButtonState","insertButtonState","groupButtonState","partButtonState","parse","handlesimdButtonClick","handleInsertClick","handleDeleteClick","handleGroupClick","handlePartClick","styled","div","App","linkingIndexTable","state","indexOfcurrentInstruction","currentInstructionR","currentTarget","number","textContent","indexR","setState","anArray","anIndex","currentInstructionO","indexOfOperand","indexOfResult","some","currentOperator","g","ov","alik2","maxRank","max","operator","fill","Dimension","target","indexOfLinkingIndex","Rank","Type","modifiedCurrentInstruction","opName","opType","opRank","opDimension","aLinkingObject","n","splice","handleGroupPartSelect","bind","newLinkinIndexObject","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","basename","process","exact","path","component","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.12bff324.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport * as _ from \"lodash\";\r\nimport simdFunction from '../utilities/simdFunction.json';\r\n// import 'array-flat-polyfill';\r\n// import 'underscore';\r\n\r\nexport function instructionsByRegisterBySteps(arrayOfObject) {//objects are quatriples {id, intrinsic, line, registers}\r\n  var newArray = []\r\n  arrayOfObject.map(function (anIntrObj) {\r\n    for (let i = 0; i < anIntrObj.registers.length; i++) {\r\n      var obj = { register: \"\", instructions: [] }\r\n      let objInstr = { id: anIntrObj.id, intrinsic: anIntrObj.intrinsic, line: anIntrObj.line, idr: anIntrObj.registers.length - i }\r\n      let register = anIntrObj.registers[i]\r\n      obj.register = register\r\n      obj.instructions.push(objInstr)\r\n      if (newArray.find(x => x.register == obj.register)) {\r\n        if (!(newArray.find(x => x.register == obj.register).instructions.find(x => x.id == objInstr.id && x.intrinsic == objInstr.intrinsic && x.idr == objInstr.idr))) {\r\n          newArray.find(x => x.register == obj.register).instructions.push(objInstr)\r\n        }\r\n      }\r\n      else {\r\n        newArray.push(obj)\r\n      }\r\n    }\r\n  })\r\n  let sorted = newArray.sort((a, b) => (a.register > b.register ? 1 : a.register < b.register ? -1 : 0))\r\n  return sorted\r\n}\r\n\r\n\r\nexport function searchInstruction(id, idr, tab) {//this function extracts from an array of objects (tab) { register:, instructions:} an object in the form {instruction:, register: } corresponding to the criteria passed to it as a parameter (id, idr,tab). the property instructions is an array of triples\r\n  var varInstruction = null\r\n  tab.find(function (obj) {\r\n    return obj.instructions.find(function (instruction) {\r\n      varInstruction = (instruction.id == id && instruction.idr == idr) ? { register: obj.register, instruction: instruction } : null\r\n      return instruction.id == id && instruction.idr == idr\r\n    })\r\n  })\r\n  return varInstruction\r\n}\r\n\r\nexport function displayWindow(aWindow) {// aWindow is an object {id:, idr:, tab}. This function construct an object {id:, idr:, name:, register:} based on aWindow\r\n  var objectTodisplay = {}, currentWindow = null;\r\n  if (searchInstruction(aWindow.id, aWindow.idr, aWindow.tab)) {\r\n    currentWindow = searchInstruction(aWindow.id, aWindow.idr, aWindow.tab);\r\n    objectTodisplay.id = currentWindow.instruction.id;\r\n    objectTodisplay.idr = currentWindow.instruction.idr;\r\n    objectTodisplay.name = currentWindow.instruction.intrinsic;\r\n    objectTodisplay.register = currentWindow.register;\r\n  }\r\n  return objectTodisplay\r\n}\r\n\r\nexport function advanceWindow(aWindow) {// This function makes it possible to go from one step in the execution of an instruction to the next step, or from one instruction to the next when all the steps of the current instruction are exhausted. At the last step of the last instruction of the program been retrieved, it starts again and returns the first step of the first instruction of the program been retrieved. The continuous application of this function therefore generates cyclical data.\r\n  return searchInstruction(aWindow.id, aWindow.idr + 1, aWindow.tab) ? { id: aWindow.id, idr: aWindow.idr + 1, tab: aWindow.tab } : (searchInstruction(aWindow.id + 1, 1, aWindow.tab) ? { id: aWindow.id + 1, idr: 1, tab: aWindow.tab } : { id: 0, idr: 1, tab: aWindow.tab })\r\n}\r\nexport function message(aWindow) {//this function generate a message in the form of and object {head:, body}. the body contains a html element containing a text to display. The text is construct based on aWindow. the property head contains the name of the correspondant register.\r\n  const styleText = { color: \"#86DE74\" }//style of the text to display, except the name of the instruction (which is displaye in the same style as the id and idr)\r\n  const styleId = { color: \"#FF7DE9\" }\r\n  var messageContent = displayWindow(aWindow)//Below we identify the paragraph (tag p) with the id of aWindow messageContent.id as we will use this id to set the same color for the paragraph having the same id\r\n  var message = { head: messageContent.register, body: <p className={messageContent.id} ><span style={styleText}>instruction:</span> <span style={styleId}>{messageContent.id}</span><br /><span style={styleText}>step:</span> <span style={styleId}>{messageContent.idr}</span><br /><span style={styleId}>{messageContent.name}</span></p> }\r\n  return message\r\n}\r\n\r\nexport function pickStep(instNumber, arrayOfInstructions) {//takes an array of instructions and an instruction number, then returns an array consisting of the steps of the instruction whose number was given.here an instruction is a triple {id:, name:, idr:, line}\r\n  return arrayOfInstructions.reduce((acc, curr) => (curr.id == instNumber) ? [curr.idr, ...acc] : acc, []);\r\n}\r\n\r\nexport function extractStepRegAtInst(aRegister, anArrayOfRegisters, instNumber) {// extract from an array of register the steps of an instruction executed on this register.this instruction is identified by its id. returns null if no step of this instruction is executed on this register.\r\n  return anArrayOfRegisters.find(e => e.register == aRegister) ? pickStep(instNumber, anArrayOfRegisters.find(e => e.register == aRegister).instructions) : null\r\n}\r\n\r\nexport function buildMatrixRegInt(anArrayOfRegisters, anArrayOfInstructions) {\r\n  let augMentArrayOfReg = [{ register: \"NAME\" }, ...anArrayOfRegisters]\r\n  let matrix = augMentArrayOfReg.map(e => new Array(anArrayOfInstructions.length + 1).fill(e.register))\r\n  matrix = matrix.map(r => (r[0] == \"NAME\") ? (r.map((c, i) => (i == 0) ? r[0] : { name: \"\" + anArrayOfInstructions[i - 1].intrinsic, line: anArrayOfInstructions[i - 1].line })) : (r.map((c, i) => (i == 0) ? r[0] : extractStepRegAtInst(c, anArrayOfRegisters, i - 1))))\r\n  return matrix[0].map((x, i) => matrix.map(x => x[i])) //this is to transpose\r\n}\r\n\r\nexport function searchStep(lineIndex, columnIndex, aMatrix) {\r\n  return lineIndex > 0 && columnIndex >= 0 && lineIndex < aMatrix.length && columnIndex < aMatrix[0].length && (aMatrix[lineIndex][columnIndex].length > 0 || (aMatrix[lineIndex][columnIndex] !== null && !Array.isArray(aMatrix[lineIndex][columnIndex])))\r\n}\r\n\r\nexport function advanceMatrixWindow(lineIndex, columnIndex, aMatrix) {//Advance the window to the next step of an instruction or until the next instruction.\r\n  return {\r\n    value: searchStep(lineIndex, columnIndex + 1, aMatrix) ? aMatrix[lineIndex][columnIndex + 1] :\r\n      ((lineIndex >= aMatrix.length - 1 && columnIndex >= aMatrix[0].length - 1 && searchStep(1, 0, aMatrix)) ? aMatrix[1][0] :\r\n        (((lineIndex >= aMatrix.length - 1 && columnIndex >= aMatrix[0].length - 1) || (lineIndex <= 0 || columnIndex < 0)) ? advanceMatrixWindow(1, 0, aMatrix).value :\r\n          ((columnIndex >= aMatrix[0].length - 1 && searchStep(lineIndex + 1, 0, aMatrix)) ? aMatrix[lineIndex + 1][0] :\r\n            ((columnIndex >= aMatrix[0].length - 1 && lineIndex < aMatrix.length - 1) ? advanceMatrixWindow(lineIndex + 1, 0, aMatrix).value :\r\n              ((lineIndex >= aMatrix.length - 1 && searchStep(aMatrix.length - 1, columnIndex + 1, aMatrix)) ? aMatrix[aMatrix.length - 1][columnIndex + 1] :\r\n                (advanceMatrixWindow(lineIndex, columnIndex + 1, aMatrix).value)))))),\r\n    indexes: searchStep(lineIndex, columnIndex + 1, aMatrix) ? [lineIndex, columnIndex + 1] :\r\n      ((lineIndex >= aMatrix.length - 1 && columnIndex >= aMatrix[0].length - 1 && searchStep(1, 0, aMatrix)) ? [1, 0] :\r\n        (((lineIndex >= aMatrix.length - 1 && columnIndex >= aMatrix[0].length - 1) || (lineIndex <= 0 || columnIndex < 0)) ? advanceMatrixWindow(1, 0, aMatrix).indexes :\r\n          ((columnIndex >= aMatrix[0].length - 1 && searchStep(lineIndex + 1, 0, aMatrix)) ? [lineIndex + 1, 0] :\r\n            ((columnIndex >= aMatrix[0].length - 1 && lineIndex < aMatrix.length - 1) ? advanceMatrixWindow(lineIndex + 1, 0, aMatrix).indexes :\r\n              ((lineIndex >= aMatrix.length - 1 && searchStep(aMatrix.length - 1, columnIndex + 1, aMatrix)) ? [aMatrix.length - 1, columnIndex + 1] :\r\n                (advanceMatrixWindow(lineIndex, columnIndex + 1, aMatrix).indexes))))))\r\n  }\r\n\r\n}\r\n\r\n\r\nexport function retrievePosition(aPosition, aMatrix) {\r\n  if (aPosition.rank == 0) {//we are at the first column (index 0)\r\n    return <th className=\"intrinsicName\" rowSpan=\"3\" scope=\"rowgroup\"><span className=\"intrinsicName\">{aMatrix[aPosition.line][aPosition.column].name.toUpperCase()}</span></th>\r\n  }\r\n  else\r\n    if (aMatrix[aPosition.line][aPosition.column].length == 1) {\r\n      if (aPosition.rank == buildNonNulPositionsLine(aPosition.line, aMatrix).length - 1) {\r\n        return <React.Fragment><td ><span className=\"empty\"></span>a</td><td ><span className=\"empty\"></span>a</td><td className=\"out\"><span className=\"out\">&#x21D9;</span></td></React.Fragment>\r\n      }\r\n      else {\r\n        return <React.Fragment><td className=\"in\"><span className=\"in\">&#x21D7;</span></td><td ><span className=\"empty\"></span></td><td ><span className=\"empty\"></span></td></React.Fragment>\r\n      }\r\n    }\r\n    else\r\n      if (aMatrix[aPosition.line][aPosition.column].length == 2) {\r\n        if (aPosition.rank == buildPosition(aPosition.line, aPosition.column, aMatrix)[0].rank) {\r\n          return <React.Fragment><td className=\"in\"><span className=\"in\">&#x21D7;</span></td><td ><span className=\"empty\"></span></td><td ><span className=\"empty\"></span></td></React.Fragment>\r\n        }\r\n        else {\r\n          return <React.Fragment><td className=\"in\"><span className=\"in\">&#x21D7;</span></td><td ><span className=\"empty\"></span></td><td className=\"out\"><span className=\"out\">&#x21D9;</span></td></React.Fragment>\r\n        }\r\n      }\r\n}\r\n\r\nexport function preRetrieveLinePosition(aPosition, aMatrix) {//this function retrieve and return the ligne corresponding to the aPosition.line each time it is called, as aPosition move foward\r\n  return aMatrix[aPosition.line].map((x, j) => j == 0 ? x : retrieveIndexPositionLine(aPosition.line, j, aPosition, aMatrix))//in, out or inout is put where necessary\r\n}\r\n\r\nexport function initializeLinesMatrix(aLine, aMatrix) {\r\n  var ligne1 = <th rowSpan=\"3\" scope=\"rowgroup\" className=\"empty\"></th>, ligne2 = null, ligne3 = null;\r\n  for (let j = 1; j < aMatrix[aLine].length; j++) {\r\n    ligne1 = <React.Fragment>{ligne1}<td className=\"empty\"></td></React.Fragment>\r\n    ligne2 = <React.Fragment>{ligne2}<td className=\"empty\"></td></React.Fragment>\r\n    ligne3 = <React.Fragment>{ligne3}<td className=\"empty\"></td></React.Fragment>\r\n  }\r\n  return <tbody><tr>{ligne1}</tr><tr>{ligne2}</tr><tr>{ligne3}</tr></tbody>\r\n}\r\n\r\nexport function initializeFirstLineMatrix(firstLine, aMatrix) {//should have call this initializeFirstLigneMatrix\r\n  var ligne1 = <th rowSpan=\"3\" scope=\"rowgroup\" className=\"intrinsicName\">{aMatrix[firstLine][0].name.toUpperCase()}</th>, ligne2 = null, ligne3 = null;\r\n  for (let j = 1; j < aMatrix[firstLine].length; j++) {\r\n    ligne1 = <React.Fragment>{ligne1}<td className=\"empty\"></td></React.Fragment>\r\n    ligne2 = <React.Fragment>{ligne2}<td className=\"empty\"></td></React.Fragment>\r\n    ligne3 = <React.Fragment>{ligne3}<td className=\"empty\"></td></React.Fragment>\r\n  }\r\n  return <tbody><tr>{ligne1}</tr><tr>{ligne2}</tr><tr>{ligne3}</tr></tbody>\r\n}\r\n\r\nexport function retrieveIndexPositionLine(aLine, aColumn, aPosition, aMatrix) {//all the positions before aPosition (those wich position are <= aPosition.rank) are retrieve\r\n  var statePos = null\r\n  if (aLine == aPosition.line) {//this condition could have been left\r\n    let indexPosition = buildPosition(aLine, aColumn, aMatrix)\r\n    if (indexPosition) {\r\n      let l = indexPosition.length\r\n      switch (l) {\r\n        case 1: if (indexPosition[0].rank == buildNonNulPositionsLine(aPosition.line, aMatrix).length - 1 && indexPosition[0].rank <= aPosition.rank) {//rank are ordered and if indexPosition[0] is the last position of the line, it is an out position\r\n          statePos = \"out\"// is the last step, the last position\r\n        }\r\n        else\r\n          if (indexPosition[0].rank <= aPosition.rank) {//indexPosition[0] isn't the last position of the line, it is an in\r\n            statePos = \"in\" + indexPosition[0].rank//add indexPosition[0].rank to intentify the step being executed (the position reach by the program execution or more precisely the flow of the program)\r\n          }\r\n          break;\r\n        case 2: if (indexPosition[1].rank <= aPosition.rank) {\r\n          statePos = \"inout\" + indexPosition[0].rank// the last step but they are two steps in this i,j index (two positions) (they are two steps which means the instruction has two steps on the corresponding register, necessarily an in and an out) and it is important to know the rank (number) of the first step (the last being an out=the last step of the line)\r\n        }//inout is  to remind that they are two positions at this i, j index it could have been out if not\r\n        else\r\n          if (indexPosition[0].rank <= aPosition.rank) {\r\n            statePos = \"in\" + indexPosition[0].rank// this rank indicate the position or the number of the this step\r\n          }\r\n          break;\r\n\r\n      }\r\n    }\r\n\r\n\r\n  }\r\n  return statePos\r\n}\r\n\r\nexport function buildPosition(indexLine, indexColumn, aMatrix) {\r\n  let obj = {}\r\n  let positionsLineCol = (searchStep(indexLine, indexColumn, aMatrix) && Array.isArray(aMatrix[indexLine][indexColumn])) ? aMatrix[indexLine][indexColumn].map(e => obj = { line: indexLine, column: indexColumn, rank: e, codeLine: aMatrix[indexLine][0].line }).sort((a, b) => a.rank - b.rank) ://e represent the step of instruction, step 1, 2, etc.(step is associate with the register)\r\n    (searchStep(indexLine, indexColumn, aMatrix) ? new Array(obj = { line: indexLine, column: indexColumn, rank: 0, codeLine: aMatrix[indexLine][0].line }) : null)\r\n  return positionsLineCol\r\n}\r\n\r\n\r\n\r\nexport function buildNonNulPositionsLine(indexLine, aMatrix) {\r\n  let positionsLine = aMatrix[indexLine].map((e, i) => searchStep(indexLine, i, aMatrix) ? buildPosition(indexLine, i, aMatrix) : null).flat().filter(e => e).sort((a, b) => a.rank - b.rank)\r\n  return positionsLine\r\n}\r\n\r\n\r\nexport function buildNonNulPositions(aMatrix) {\r\n  return aMatrix.map((e, i) => buildNonNulPositionsLine(i, aMatrix).length > 0 ? buildNonNulPositionsLine(i, aMatrix) : null)\r\n}\r\n\r\n\r\nexport function advancePosition(aPosition, aMatrix) {\r\n  return buildNonNulPositionsLine(aPosition.line, aMatrix).find(e => e.rank > aPosition.rank) ? buildNonNulPositionsLine(aPosition.line, aMatrix).find(e => e.rank > aPosition.rank) :\r\n    buildNonNulPositionsLine(advanceMatrixWindow(buildNonNulPositionsLine(aPosition.line, aMatrix).find((pos, i, t) => !t.some(x => x.column > pos.column)).line, buildNonNulPositionsLine(aPosition.line, aMatrix).find((pos, i, t) => !t.some(x => x.column > pos.column)).column, aMatrix).indexes[0], aMatrix)[0]\r\n}\r\n\r\nexport function advanceLinePosition(aPosition, aMatrix) {\r\n  return (aPosition.line === advancePosition(aPosition, aMatrix).line && aPosition.rank !== null) ? advancePosition(aPosition, aMatrix) :\r\n    (aPosition.rank !== null ? { line: aPosition.line, column: aMatrix[0].length - 1, rank: null, codeLine: aPosition.codeLine } : buildNonNulPositionsLine(advanceMatrixWindow(aPosition.line, aPosition.column, aMatrix).indexes[0], aMatrix)[0])\r\n}\r\nexport function renameReg(aRegister) {\r\n  return aRegister.length == 4 ? aRegister[0].toUpperCase() + aRegister[3] : (aRegister[0] + \"M\").toUpperCase()\r\n}\r\n\r\n\r\nexport function renameRegister(aMatrix) {\r\n  return aMatrix.map((e, i) => i == 0 ? e.map((x, j) => j == 0 ? x : renameReg(x)) : e)\r\n}\r\nexport function removePrefix(linesPrefix, aMatrix) {\r\n  return aMatrix.map((e, i) => i == 0 ? e : e.map((x, j) => j == 0 && findPrefix(linesPrefix, x.name.toUpperCase()) ? { name: x.name.slice(findPrefix(linesPrefix, x.name.toUpperCase()).length), line: x.line } : x))\r\n}\r\n\r\nexport function findPrefix(linesPrefix, anInstruction) {\r\n  return linesPrefix.find((currentPre, indexPre, currentTa) => anInstruction.toUpperCase().slice(0, currentPre.length).match(currentPre.toUpperCase()) && !(currentTa.find(e => anInstruction.toUpperCase().slice(0, e.length).match(e.toUpperCase())).length > currentPre.length))\r\n}\r\n\r\nexport function removeSuffix(linesSuffix, aMatrix) {\r\n  return aMatrix.map((e, i) => i == 0 ? e : e.map((x, j) => j == 0 && findSuffix(linesSuffix, x.name.toUpperCase()) ? { name: x.name.slice(0, x.name.length - findSuffix(linesSuffix, x.name.toUpperCase()).length), line: x.line } : x))\r\n}\r\n\r\nexport function findSuffix(linesSuffix, anInstruction) {\r\n  return linesSuffix.find((currentPre, indexPre, currentTa) => anInstruction.toUpperCase().slice(anInstruction.length - currentPre.length).match(currentPre.toUpperCase()) && !(currentTa.find(e => anInstruction.toUpperCase().slice(anInstruction.length - e.length).match(e.toUpperCase())).length > currentPre.length))\r\n}\r\nexport function consPath(aPosition, aMatrix) {\r\n  return (forwardPathPosition(aPosition, aMatrix).concat(backwardPathPosition(aPosition, aMatrix))).sort((a, b) => compare(a, b))\r\n}\r\n\r\nexport function nextPositions(aPosition, aMatrix) {\r\n  var pathNextpos = []\r\n  if (aPosition.rank > 0) {\r\n    var forbidenColumn = 0\r\n    pathNextpos = [aPosition, ...pathNextpos]\r\n    let lastPositionLine = buildNonNulPositionsLine(aPosition.line, aMatrix)[buildNonNulPositionsLine(aPosition.line, aMatrix).length - 1]\r\n    if (aPosition.rank < lastPositionLine.rank) {// the last position is always the successor of all the position of the same line\r\n      pathNextpos = [lastPositionLine, ...pathNextpos]\r\n      forbidenColumn = lastPositionLine.column // the next position can't be on the same column after an out position (can't be skiped)\r\n    }\r\n    for (let i = aPosition.line; i < aMatrix.length; i++) {\r\n      let positionsLine = buildNonNulPositionsLine(i, aMatrix)\r\n      let posNext = positionsLine.find(e => e.column != forbidenColumn && e.column == aPosition.column && e.line != aPosition.line && !pathNextpos.find(x => _.isEqual(x, e)))\r\n      if (posNext) {\r\n        pathNextpos = posNext.rank < positionsLine[positionsLine.length - 1].rank ? [posNext, ...pathNextpos] : pathNextpos\r\n        break\r\n      }\r\n    }\r\n  }\r\n  return pathNextpos.sort((a, b) => compare(a, b))\r\n}\r\n\r\n\r\nexport function previousPositions(aPosition, aMatrix) {\r\n  var pathNextpos = []\r\n  if (aPosition.rank > 0) {\r\n    var authorizedColumn = aPosition.column // the previous position if not on the same line (wich is always the case for an out position) is always on the same column as the position\r\n    pathNextpos = [aPosition, ...pathNextpos]\r\n    let lastPositionLine = buildNonNulPositionsLine(aPosition.line, aMatrix)//[buildNonNulPositionsLine(aPosition.line, aMatrix).length-1]\r\n    if (aPosition.rank == lastPositionLine[lastPositionLine.length - 1].rank) {//  all the positions of the same line are always the predecessor of the out position\r\n      pathNextpos = [...lastPositionLine.filter(e => !pathNextpos.find(x => _.isEqual(x, e))), ...pathNextpos].filter(e => e.rank != 0)\r\n    }\r\n    else {\r\n      for (let i = aPosition.line; i > 0; i--) {\r\n        let positionsLine = buildNonNulPositionsLine(i, aMatrix)\r\n        let posNext = positionsLine.find(e => e.column == authorizedColumn && e.line != aPosition.line && !pathNextpos.find(x => _.isEqual(x, e)))\r\n        if (posNext) {\r\n          pathNextpos = positionsLine[positionsLine.length - 1].column == authorizedColumn ? [positionsLine[positionsLine.length - 1], ...pathNextpos] : [posNext, ...pathNextpos]//if the out position is in the same column it is the which one picked\r\n          break\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  return pathNextpos.sort((a, b) => compare(a, b)).reverse()\r\n}\r\n\r\n\r\n\r\n\r\nexport function matrixPath(aMatrix) {\r\n  return aMatrix.map((x, i) => i == 0 ? [] : x.map((y, j) => j == 0 ? [] : (searchStep(i, j, aMatrix) ? buildPosition(i, j, aMatrix).map(e => nextPositions(e, aMatrix)) : [])))\r\n}\r\n\r\n\r\nexport function forwardPathPosition(aPosition, aMatrix) {\r\n  var forwardPathOfPosition = nextPositions(aPosition, aMatrix)\r\n  let level = 1\r\n  while (level < aMatrix.length) {\r\n    //forwardPathOfPosition=forwardPathOfPosition.map((e, i,t)=>nextPositions(e, aMatrix)).flat()\r\n    forwardPathOfPosition = forwardPathOfPosition.concat(forwardPathOfPosition.map((e, i, t) => nextPositions(e, aMatrix).filter(x => !t.find(y => y.rank == x.rank && y.column == x.column && y.line == x.line && y.codeLine == x.codeLine))).flat())\r\n    level++\r\n  }\r\n  return forwardPathOfPosition.sort((a, b) => compare(a, b))\r\n}\r\n/*function comptuteNextPositionsTab(tabOfPositions){\r\n  return tabOfPositions.length==1||!Array.isArray(tabOfPositions)?[tabOfPositions].flat():tabOfPositions.map(e=>comptuteNextPositionsTab(e))\r\n}*/\r\n\r\nexport function backwardPathPosition(aPosition, aMatrix) {\r\n  var backwardPathOfPosition = []\r\n  for (let i = 1; i < aPosition.line; i++) {\r\n    let positionsLine = buildNonNulPositionsLine(i, aMatrix)\r\n    for (let j = 0; j < positionsLine.length; j++) {\r\n      let forwardPathOfPositionj = forwardPathPosition(positionsLine[j], aMatrix)\r\n      backwardPathOfPosition = forwardPathOfPositionj.some(x => x.rank == aPosition.rank && x.column == aPosition.column && x.line == aPosition.line && x.codeLine == aPosition.codeLine) ? backwardPathOfPosition.concat(positionsLine[j]) : backwardPathOfPosition\r\n    }\r\n  }\r\n  let positionsLine = buildNonNulPositionsLine(aPosition.line, aMatrix)\r\n  for (let j = 0; j < aPosition.rank; j++) {\r\n    let forwardPathOfPositionj = forwardPathPosition(positionsLine[j], aMatrix)\r\n    backwardPathOfPosition = forwardPathOfPositionj.some(x => x.rank == aPosition.rank && x.column == aPosition.column && x.line == aPosition.line && x.codeLine == aPosition.codeLine) ? backwardPathOfPosition.concat(positionsLine[j]) : backwardPathOfPosition\r\n  }\r\n  return backwardPathOfPosition.sort((a, b) => compare(a, b))\r\n}\r\n\r\nexport function extractPositionFromId(aGivenId) {\r\n  let positionPropertiesArray = aGivenId.split(/[lcrz]/)\r\n  return { line: parseInt(positionPropertiesArray[1]), column: parseInt(positionPropertiesArray[2]), rank: parseInt(positionPropertiesArray[3]), codeLine: parseInt(positionPropertiesArray[4]) }\r\n}\r\n\r\nexport function maxPosition(aMatrix) {\r\n  let pos = buildNonNulPositionsLine(aMatrix.length - 1, aMatrix)[buildNonNulPositionsLine(aMatrix.length - 1, aMatrix).length - 1]\r\n  return pos\r\n}\r\n\r\nexport function minFreePosition(aListOfCurrentPosition) {\r\n  let anArray = aListOfCurrentPosition.map(e => e.idPosition)\r\n  anArray = anArray.map(e => parseInt(e, 10))\r\n  anArray = anArray.sort((a, b) => a - b)\r\n  let freePos = null\r\n  let l = anArray.length\r\n  switch (l) {\r\n    case 0: freePos = 1\r\n      break\r\n    case 1: if (anArray[0] != 1) {\r\n      freePos = 1\r\n    }\r\n    else {\r\n      freePos = 2\r\n    }\r\n      break\r\n    default: {\r\n      if (anArray[0] != 1) {\r\n        freePos = 1\r\n      }\r\n      else {\r\n        for (let i = 1; i < l; i++) {\r\n          if (anArray[i] - anArray[i - 1] > 1) {\r\n            freePos = anArray[i - 1] + 1\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  freePos = freePos ? freePos : l + 1\r\n  return freePos\r\n}\r\n\r\nexport function updateArrayOfCurrentPositions(anArrayOfCurrentPositions, idOfEventElt, aMatrix) {\r\n  let thisPosition = extractPositionFromId(idOfEventElt)//; console.log(\"nexposition\",  nextPositions(thisPosition, aMatrix), \"previous\", previousPositions(thisPosition, aMatrix))\r\n  let eltId = anArrayOfCurrentPositions.find(e => e.anElementId == idOfEventElt) //[...aListOfCurrentPosition, {aPosition:pathElt[0], anElementId:idOfEventElt}]\r\n  if (!eltId) {\r\n    let pathElt = consPath(extractPositionFromId(idOfEventElt), aMatrix)\r\n    let pathEltDown = forwardPathPosition(extractPositionFromId(idOfEventElt), aMatrix)\r\n    let pathEltUp = backwardPathPosition(extractPositionFromId(idOfEventElt), aMatrix).concat(thisPosition)\r\n    let positionsOfThisLine = buildNonNulPositionsLine(pathElt[0].line, aMatrix).filter(e => e.rank >= 1)\r\n    let positionsOfThisLineUp = buildNonNulPositionsLine(pathEltUp[0].line, aMatrix).filter(e => e.rank >= 1)\r\n    let positionsOfThisLineDown = buildNonNulPositionsLine(pathEltDown[0].line, aMatrix).filter(e => e.rank >= 1)\r\n    let restrictPositions = linePosition(pathElt, pathElt[0], aMatrix).filter(e => !_.isEqual(e, thisPosition)).length == 0 ? [positionsOfThisLine[positionsOfThisLine.length - 1]] : linePosition(pathElt, pathElt[0], aMatrix).filter(e => !_.isEqual(e, thisPosition))\r\n    let restrictPositionsup = linePosition(pathEltUp, pathEltUp[0], aMatrix).filter(e => !_.isEqual(e, thisPosition)).length == 0 ? [positionsOfThisLineUp[positionsOfThisLineUp.length - 1]] : linePosition(pathEltUp, pathEltUp[0], aMatrix).filter(e => !_.isEqual(e, thisPosition))\r\n    let restrictPositionsDown = linePosition(pathEltDown, pathEltDown[0], aMatrix).filter(e => !_.isEqual(e, thisPosition)).length == 0 ? [positionsOfThisLineDown[positionsOfThisLineDown.length - 1]] : linePosition(pathEltDown, pathEltDown[0], aMatrix).filter(e => !_.isEqual(e, thisPosition))\r\n    anArrayOfCurrentPositions = [...anArrayOfCurrentPositions, {\r\n      aCurrentPosition: restrictPositions, aCurrentPositionUp: previousPositions(thisPosition, aMatrix), aCurrentPositionDown: nextPositions(thisPosition, aMatrix), anElementId: idOfEventElt, idPosition: minFreePosition(anArrayOfCurrentPositions),\r\n      listOfPath: pathElt, listOfPathUp: pathEltUp, listOfPathDown: pathEltDown, linkedPositionsUp: [thisPosition], linkedPositionsDown: [thisPosition]\r\n    }]\r\n  }\r\n  else {\r\n    anArrayOfCurrentPositions.splice(anArrayOfCurrentPositions.indexOf(eltId), 1)\r\n  }\r\n  return anArrayOfCurrentPositions\r\n}\r\n\r\n\r\nexport function linePosition(aPath, aPosition, aMatrix) {\r\n  let positionLine = []\r\n  if (aPosition.rank == buildNonNulPositionsLine(aPosition.line, aMatrix)[buildNonNulPositionsLine(aPosition.line, aMatrix).length - 1].rank) {\r\n    positionLine = [...positionLine, aPosition]\r\n  }\r\n  else {\r\n    positionLine = aPath.filter(e => e.line == aPosition.line && e.rank != buildNonNulPositionsLine(aPosition.line, aMatrix)[buildNonNulPositionsLine(aPosition.line, aMatrix).length - 1].rank)\r\n  }     //console.log(\"position\",aPosition, \"posiLi\",positionLine)\r\n  return positionLine\r\n}\r\n\r\n\r\nexport function advanceAselectPosition(anObjectOfCurrentPosition, aMatrix) {\r\n\r\n  let thisPosition = extractPositionFromId(anObjectOfCurrentPosition.anElementId)\r\n  let linePositions = buildNonNulPositionsLine(anObjectOfCurrentPosition.listOfPath[0].line, aMatrix)\r\n  let firstPosition = linePosition(anObjectOfCurrentPosition.listOfPath, anObjectOfCurrentPosition.listOfPath[0], aMatrix).filter(e => !_.isEqual(e, thisPosition)).length == 0 ?\r\n    [linePositions[linePositions.length - 1]] : linePosition(anObjectOfCurrentPosition.listOfPath, anObjectOfCurrentPosition.listOfPath[0], aMatrix).filter(e => !_.isEqual(e, thisPosition))\r\n\r\n  if (_.isEqual(anObjectOfCurrentPosition.aCurrentPosition[anObjectOfCurrentPosition.aCurrentPosition.length - 1], anObjectOfCurrentPosition.listOfPath[anObjectOfCurrentPosition.listOfPath.length - 1])) {\r\n    anObjectOfCurrentPosition.aCurrentPosition = firstPosition\r\n  }\r\n  else {\r\n    let anextPosition = anObjectOfCurrentPosition.listOfPath.find(e => (e.line > anObjectOfCurrentPosition.aCurrentPosition[0].line || (e.line == anObjectOfCurrentPosition.aCurrentPosition[0].line && e.rank > anObjectOfCurrentPosition.aCurrentPosition[0].rank)) && !anObjectOfCurrentPosition.aCurrentPosition.some(x => _.isEqual(x, e)))\r\n    let nextPositions = linePosition(anObjectOfCurrentPosition.listOfPath, anextPosition, aMatrix).filter(e => !_.isEqual(e, thisPosition))\r\n    if (nextPositions.length > 0) {\r\n      anObjectOfCurrentPosition.aCurrentPosition = nextPositions\r\n    }\r\n    else {\r\n      let followingPosition = anObjectOfCurrentPosition.listOfPath.find(e => (e.line > thisPosition.line || (e.line == thisPosition.line && e.rank > thisPosition.rank)) && !linePosition(anObjectOfCurrentPosition.listOfPath, thisPosition, aMatrix).some(x => _.isEqual(x, e)))\r\n      if (followingPosition) {\r\n        anObjectOfCurrentPosition.aCurrentPosition = linePosition(anObjectOfCurrentPosition.listOfPath, followingPosition, aMatrix)\r\n      }\r\n      else {\r\n        anObjectOfCurrentPosition.aCurrentPosition = firstPosition\r\n      }\r\n    }\r\n  }\r\n  return anObjectOfCurrentPosition\r\n}\r\n\r\n\r\nexport function advanceAselectPositionFoward(anObjectOfCurrentPosition, aMatrix) {\r\n\r\n  let thisPosition = extractPositionFromId(anObjectOfCurrentPosition.anElementId)\r\n  let linePositions = buildNonNulPositionsLine(anObjectOfCurrentPosition.listOfPathDown[0].line, aMatrix)\r\n  let firstPosition = linePosition(anObjectOfCurrentPosition.listOfPathDown, anObjectOfCurrentPosition.listOfPathDown[0], aMatrix).filter(e => !_.isEqual(e, thisPosition)).length == 0 ?\r\n    [linePositions[linePositions.length - 1]] : linePosition(anObjectOfCurrentPosition.listOfPathDown, anObjectOfCurrentPosition.listOfPathDown[0], aMatrix).filter(e => !_.isEqual(e, thisPosition))\r\n\r\n  if (_.isEqual(anObjectOfCurrentPosition.aCurrentPositionDown[anObjectOfCurrentPosition.aCurrentPositionDown.length - 1], anObjectOfCurrentPosition.listOfPathDown[anObjectOfCurrentPosition.listOfPathDown.length - 1])) {\r\n    anObjectOfCurrentPosition.aCurrentPositionDown = firstPosition\r\n  }\r\n  else {\r\n    let anextPosition = anObjectOfCurrentPosition.listOfPathDown.find(e => (e.line > anObjectOfCurrentPosition.aCurrentPositionDown[0].line || (e.line == anObjectOfCurrentPosition.aCurrentPositionDown[0].line && e.rank > anObjectOfCurrentPosition.aCurrentPositionDown[0].rank)) && !anObjectOfCurrentPosition.aCurrentPositionDown.some(x => _.isEqual(x, e)))\r\n    let nextPositions = linePosition(anObjectOfCurrentPosition.listOfPathDown, anextPosition, aMatrix).filter(e => !_.isEqual(e, thisPosition))\r\n    if (nextPositions.length > 0) {\r\n      anObjectOfCurrentPosition.aCurrentPositionDown = nextPositions\r\n    }\r\n    else {\r\n      let followingPosition = anObjectOfCurrentPosition.listOfPathDown.find(e => (e.line > thisPosition.line || (e.line == thisPosition.line && e.rank > thisPosition.rank)) && !linePosition(anObjectOfCurrentPosition.listOfPathDown, thisPosition, aMatrix).some(x => _.isEqual(x, e)))\r\n      if (followingPosition) {\r\n        anObjectOfCurrentPosition.aCurrentPositionDown = linePosition(anObjectOfCurrentPosition.listOfPathDown, followingPosition, aMatrix)\r\n      }\r\n      else {\r\n        anObjectOfCurrentPosition.aCurrentPositionDown = firstPosition\r\n      }\r\n    }\r\n  }\r\n  return anObjectOfCurrentPosition\r\n}\r\n\r\nexport function advanceSelectPositionsFoward(anArrayOfCurrentPositions, aMatrix) {//aListOfCurrentPosition={aPosition:..., anElementId:...idPosition:, listhOfPath:} anElementId is an id corresponding to aPosition\r\n  return anArrayOfCurrentPositions.map(e => advanceAselectPositionFoward(e, aMatrix))\r\n}\r\n\r\nexport function advanceSelectPositions(anArrayOfCurrentPositions, aMatrix) {//aListOfCurrentPosition={aPosition:..., anElementId:...idPosition:, listhOfPath:} anElementId is an id corresponding to aPosition\r\n  return anArrayOfCurrentPositions.map(e => advanceAselectPosition(e, aMatrix))\r\n}\r\n\r\nexport function compare(a, b) {\r\n  if (a.line == b.line) {\r\n    if (a.rank < b.rank) {\r\n      return -1\r\n    }\r\n    else {\r\n      if (a.rank > b.rank) {\r\n        return 1\r\n      }\r\n      else {\r\n        return 0\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (a.line < b.line) {\r\n      return -1\r\n    }\r\n    else {\r\n      return 1\r\n    }\r\n  }\r\n}\r\n\r\nexport function computeSuffix(aPosition, anArrayOfCurrentPositions) {\r\n  let suffix = null\r\n  if (anArrayOfCurrentPositions) {\r\n    if (anArrayOfCurrentPositions.find(e => _.isEqual(extractPositionFromId(e.anElementId), aPosition))) {\r\n      suffix = \"id\" + anArrayOfCurrentPositions.find(e => _.isEqual(extractPositionFromId(e.anElementId), aPosition)).idPosition\r\n    }\r\n    else {\r\n      if (anArrayOfCurrentPositions.find(e => e.aCurrentPosition.find(x => _.isEqual(x, aPosition)))) {\r\n        suffix = \"el\" + anArrayOfCurrentPositions.find(e => e.aCurrentPosition.find(x => _.isEqual(x, aPosition))).idPosition\r\n      }\r\n      else {\r\n        suffix = \"\"\r\n      }\r\n    }//console.log(\"suffix\",suffix,\"aPosition\",aPosition,\"aListOfcurrent\", anArrayOfCurrentPositions)\r\n  }\r\n  return suffix\r\n}\r\n\r\nexport function findPositionInCurrentPositions(indexLine, aListOfCurrentPosition) {\r\n  return aListOfCurrentPosition.find(e => e.aPosition.line == indexLine || extractPositionFromId(e.anElementId).line == indexLine) ?\r\n    (aListOfCurrentPosition.find(e => e.aPosition.line == indexLine) ? aListOfCurrentPosition.find(e => e.aPosition.line == indexLine).aPosition :\r\n      extractPositionFromId(aListOfCurrentPosition.find(e => extractPositionFromId(e.anElementId).line == indexLine).anElementId)) : null\r\n}\r\n\r\nexport function matrixToPosition(aMatrix) {// build a matrix of position with a given matrix\r\n  let matrixPosition = aMatrix.map((e, i) => i == 0 ? e : e.map((x, j) => j == 0 ? x : (buildPosition(i, j, aMatrix) ? (buildPosition(i, j, aMatrix).length == 1 ?\r\n    (_.isEqual(buildPosition(i, j, aMatrix)[0], buildNonNulPositionsLine(i, aMatrix)[buildNonNulPositionsLine(i, aMatrix).length - 1]) ? Array.of(Array.of(), Array.of(), Array.of(buildPosition(i, j, aMatrix)[0])) :\r\n      Array.of(Array.of(buildPosition(i, j, aMatrix)[0]), Array.of(), Array.of())) :\r\n    Array.of(Array.of(buildPosition(i, j, aMatrix)[0]), Array.of(), Array.of(buildPosition(i, j, aMatrix)[1]))) :\r\n    Array.of(Array.of(), Array.of(), Array.of()))))\r\n  return matrixPosition\r\n}\r\n\r\n\r\n\r\nexport function emptyPositionsAndCoordinateOfFigures(aMatrixPosition, aMatrixCoordinate) {// build a matrix of figures (svg elements) with a given matrix of positions and a matrix of coordinates (with empty classNames)\r\n  let emptyMatrixFigures = aMatrixPosition.map((e, i) => i == 0 ? e.map((x, j) => j == 0 ? (<g transform={'translate(' + aMatrixCoordinate[i][j][0] + ',' + aMatrixCoordinate[i][j][1] + ')'}><rect className=\"name\" x=\"0\" y=\"0\" width={\"\" + aMatrixCoordinate[i][j][2]} height={\"\" + aMatrixCoordinate[i][j][3]}></rect>\r\n    <text className=\"textname\" alignmentBaseline=\"middle\" textAnchor=\"middle\" x={\"\" + aMatrixCoordinate[i][j][2] / 2} y={\"\" + aMatrixCoordinate[i][j][3] / 2}>{x}</text></g>) :\r\n    (<g transform={'translate(' + aMatrixCoordinate[i][j][0] + ',' + aMatrixCoordinate[i][j][1] + ')'}><rect className=\"head\" x=\"0\" y=\"0\" width={\"\" + aMatrixCoordinate[i][j][2]} height={\"\" + aMatrixCoordinate[i][j][3]}></rect>\r\n      <text className=\"texthead\" alignmentBaseline=\"middle\" textAnchor=\"middle\" x={\"\" + aMatrixCoordinate[i][j][2] / 2} y={\"\" + aMatrixCoordinate[i][j][3] / 2}>{x}</text></g>)) :\r\n    e.map((x, j) => j == 0 ? (<g transform={'translate(' + aMatrixCoordinate[i][j][0] + ',' + aMatrixCoordinate[i][j][1] + ')'}><rect className=\"emptyIntrinsicName\" x=\"0\" y=\"0\" width={\"\" + aMatrixCoordinate[i][j][2]} height={\"\" + aMatrixCoordinate[i][j][3]}></rect>\r\n      <text className=\"emptyTextintrinsicName\" alignmentBaseline=\"middle\" textAnchor=\"middle\" x={\"\" + aMatrixCoordinate[i][j][2] / 2} y={\"\" + aMatrixCoordinate[i][j][3] / 2}></text></g>) :\r\n      x.map((t, l) => t.length == 0 ? (<g transform={'translate(' + aMatrixCoordinate[i][j][l][0] + ',' + aMatrixCoordinate[i][j][l][1] + ')'}><rect className=\"empty\" x=\"0\" y=\"0\" width={\"\" + aMatrixCoordinate[i][j][l][2]} height={\"\" + aMatrixCoordinate[i][j][l][3]}></rect></g>) :\r\n        (l == 0 ? (<g transform={'translate(' + aMatrixCoordinate[i][j][l][0] + ',' + aMatrixCoordinate[i][j][l][1] + ')'}><rect className=\"empty\" x=\"0\" y=\"0\" width={\"\" + aMatrixCoordinate[i][j][l][2]} height={\"\" + aMatrixCoordinate[i][j][l][3]}></rect></g>) :\r\n          (<g transform={'translate(' + aMatrixCoordinate[i][j][l][0] + ',' + aMatrixCoordinate[i][j][l][1] + ')'}><rect className=\"empty\" x=\"0\" y=\"0\" width={\"\" + aMatrixCoordinate[i][j][l][2]} height={\"\" + aMatrixCoordinate[i][j][l][3]}></rect></g>)))))\r\n  return emptyMatrixFigures\r\n}\r\n\r\nexport function matrixToCoordinate(aMatrx, anOrigin, widthOfFigures, heightOfFigures) {//build a matrix of coordinates with a given matrix, origin, width and height of figures\r\n  let matrixCoordinate = aMatrx.map((e, i) => i == 0 ? e.map((x, j) => Array.of(anOrigin + j * widthOfFigures, anOrigin + i * heightOfFigures, widthOfFigures, heightOfFigures)) :\r\n    e.map((x, j) => j == 0 ? Array.of(anOrigin + j * widthOfFigures, anOrigin + i * heightOfFigures, widthOfFigures, heightOfFigures) :\r\n      Array.of(Array.of(anOrigin + j * widthOfFigures, anOrigin + i * heightOfFigures, widthOfFigures, heightOfFigures / 3),\r\n        Array.of(anOrigin + j * widthOfFigures, anOrigin + (3 * i + 1) * heightOfFigures / 3, widthOfFigures, heightOfFigures / 3),\r\n        Array.of(anOrigin + j * widthOfFigures, anOrigin + (3 * i + 2) * heightOfFigures / 3, widthOfFigures, heightOfFigures / 3))))\r\n  return matrixCoordinate\r\n}\r\n\r\n\r\nexport function removeDuplicatesFromArray(anArray) {\r\n  return [...new Set(anArray.map(o => JSON.stringify(o)))].map(s => JSON.parse(s))\r\n}\r\n\r\nexport function removeDuplicatesEltsFromArray(anArray) {\r\n  return anArray.reduce((acc, e) => !acc.find(x => x.props.id == e.props.id) ? [e, ...acc] : acc, [])\r\n}\r\n\r\nexport function constructPositionFromId(anIdOfFirstColumnPosition) {\r\n  let myArray = /(\\d+)name\\S*line(\\d+)/g.exec(anIdOfFirstColumnPosition)\r\n  let line = parseInt(myArray[1], 10)\r\n  let codeLine = parseInt(myArray[2], 10)\r\n  return { line: line, column: 0, rank: 0, codeLine: codeLine }\r\n}\r\n\r\nexport function constructDescription(aSimdFunction, aDescriptionFile, returnType) {// take a name of a function (which return returnType) and construct a look-like manufacturer description using a file provide by the manufacturer (Intel)\r\n  var objectDescription;\r\n  if (returnType) {\r\n    objectDescription = aDescriptionFile.intrinsic.find(o => (o._name.toLocaleLowerCase() == aSimdFunction.toLocaleLowerCase()) && (returnType.toLocaleLowerCase() == o._rettype.toLocaleLowerCase()));\r\n  }\r\n  else {\r\n    objectDescription = aDescriptionFile.intrinsic.find(o => o._name.toLocaleLowerCase() == aSimdFunction.toLocaleLowerCase());\r\n  }\r\n  let parameter = !objectDescription.hasOwnProperty(\"parameter\") ? \"void\" : objectDescription.parameter;\r\n  objectDescription = { ...objectDescription, parameter }//we add parameter property if it doesn't yet exist\r\n  let line1 = `${objectDescription._rettype} ${objectDescription._name} (${Array.isArray(objectDescription.parameter) ? objectDescription.parameter.flatMap((e, i) => i < objectDescription.parameter.length - 1 ? [e._type, e._varname + \",\"] : [e._type, e._varname]).join(\" \") : objectDescription.parameter})`;\r\n  let line2 = `Synopsis \\n\\t\\t${line1} \\n\\t\\t#include <${objectDescription.header}>\\n\\t\\tInstruction: ${objectDescription.hasOwnProperty(\"instruction\") ? objectDescription.instruction[0]._name + \" \" + objectDescription.instruction[0]._form : \"sequence\"}\\n\\t\\t${objectDescription.hasOwnProperty(\"CPUID\") ? \"CPUID Flags: \" + objectDescription.CPUID : \"\"} `;\r\n  let line3 = `Description \\n\\t\\t${objectDescription.description}`;\r\n  let line4 = `Operation \\n\\t\\t${objectDescription.operation.replaceAll('\\t', '\\t\\t').replaceAll('\\n', '\\n\\t\\t')}`;\r\n  return [objectDescription, `${line1}\\n\\n\\t${line2}\\n\\n\\t${line3}\\n\\n\\t${line4}`];\r\n}\r\n\r\nexport function constructDataListTable(aSimdDescriptionFile) {// take a file provide the manufacturer (like Intel) where simd instructions are describe and return a table with the name of simd instructions on others featurest\r\n  return aSimdDescriptionFile.intrinsic.map(e => {\r\n    let parameter = !e.hasOwnProperty(\"parameter\") ? \"void\" : e.parameter;\r\n    let objectDescription = e;\r\n    objectDescription = { ...objectDescription, parameter }//we add parameter property if it doesn't yet exist\r\n    let line1 = `${objectDescription._rettype} ${objectDescription._name} (${Array.isArray(objectDescription.parameter) ? objectDescription.parameter.flatMap((e, i) => i < objectDescription.parameter.length - 1 ? [e._type, e._varname + \",\"] : [e._type, e._varname]).join(\" \") : objectDescription.parameter})`;\r\n    let line2 = `Synopsis \\n\\t\\t${line1} \\n\\t\\t#include <${objectDescription.header}>\\n\\t\\tInstruction: ${objectDescription.hasOwnProperty(\"instruction\") ? objectDescription.instruction[0]._name + \" \" + objectDescription.instruction[0]._form : \"sequence\"}\\n\\t\\t${objectDescription.hasOwnProperty(\"CPUID\") ? \"CPUID Flags: \" + objectDescription.CPUID : \"\"} `;\r\n    let line3 = `Description \\n\\t\\t${objectDescription.description}`;\r\n    let line4 = typeof (objectDescription.operation) === \"string\" ? `Operation \\n\\t\\t${objectDescription.operation.replaceAll('\\t', '\\t\\t').replaceAll('\\n', '\\n\\t\\t')}` : `Operation \\n\\t\\t No operation`;\r\n    return [objectDescription._name, objectDescription._rettype, objectDescription.parameter, `${line1}\\n\\n\\t${line2}\\n\\n\\t${line3}\\n\\n\\t${line4}`]\r\n  });\r\n}\r\n\r\nexport function computeOperandsAndresultElt(aSimdDescriptionFile) {// take a file provide the manufacturer (like Intel) where simd instructions are describe and return and array of objects {name:\"nameOfIntrinsicInstruction\", retype:\"returnType\",operands:[], result: [], varnames:[], types:[], sizeOfScalarFiel:0} desscribing each instruction\r\n  return aSimdDescriptionFile.intrinsic.map(e => {\r\n    var obj = {};\r\n    let name = e._name;\r\n    obj = { ...obj, name };\r\n    var regTypeNumber = /(?<=_m|__m|_int|__int)\\d+/g;\r\n    var regextractSizeFromDesc = /\\d+(?=-bit)/g;// We have notice that the size of scalar unit of a vector instruction can be assimilated to a x-bit expression in the description of tha instruction\r\n    let arrayOfMinimunSizeInDescription = e.description.match(regextractSizeFromDesc);\r\n    const sizeOfScalarField = arrayOfMinimunSizeInDescription ? Math.min(...arrayOfMinimunSizeInDescription) : 1;\r\n    var maxSize = sizeOfScalarField;\r\n    obj = { ...obj, sizeOfScalarField };\r\n    var result = [];\r\n    if (e._rettype) {\r\n      let retType = e._rettype;\r\n      obj = { ...obj, retType };\r\n      let retTypeNumber = e._rettype.match(regTypeNumber);\r\n      retTypeNumber = retTypeNumber ? retTypeNumber[0] : 0;\r\n      maxSize = retTypeNumber > maxSize ? retTypeNumber : maxSize;\r\n      if (retTypeNumber != 0) {\r\n        let size = retTypeNumber / sizeOfScalarField;\r\n        for (let i = 0; i < size; i++) {\r\n          result = [...result, i]\r\n        }\r\n      }\r\n      obj = { ...obj, result };\r\n    }\r\n    var operands = [], varnames = [], types = [];\r\n    if (e.parameter && Array.isArray(e.parameter) && !e.parameter.find(e => e._varname === \"\" || e._type === \"void\")) {\r\n      e.parameter.forEach((element, k) => {\r\n        if (element._type) {\r\n          types[k] = element._type.split(\" \")[element._type.split(\" \").length - 1];\r\n          varnames[k] = element._varname;\r\n          obj = { ...obj, varnames, types };\r\n          let operandNumber = types[k].match(regTypeNumber);\r\n          var operand = [];\r\n          if (operandNumber) {\r\n            let operandSize = operandNumber[0];\r\n            maxSize = operandSize > maxSize ? operandSize : maxSize;\r\n            let size = operandSize / sizeOfScalarField;\r\n            for (let i = 0; i < size; i++) {\r\n              operand = [...operand, i]\r\n            }\r\n            operands = [...operands, operand];\r\n            obj = { ...obj, operands };\r\n          }\r\n          else {\r\n            let fieldArray = types[k].match(/(?<=_m|__m|_int|__int)\\w*mask\\w*/g);\r\n            let operandSize = (fieldArray || element._varname == \"imm8\") ? maxSize : sizeOfScalarField;\r\n            let size = operandSize / sizeOfScalarField;\r\n            for (let i = 0; i < size; i++) {\r\n              operand = [...operand, i];\r\n            }\r\n            operands = [...operands, operand];\r\n            obj = { ...obj, operands };\r\n          }\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      if (e.parameter && Array.isArray(e.parameter) && e.parameter.find(e => e._varname === \"\" || e._type === \"void\")) {\r\n        obj = { ...obj, operands, varnames, types }\r\n      }\r\n    }\r\n    if (result.length == 0 && e._rettype.match(/(?<=_m|__m|_int|__int)\\w*mask\\w*/g)) {\r\n      let size = maxSize / sizeOfScalarField;\r\n      for (let i = 0; i < size; i++) {\r\n        result = [...result, i]\r\n      }\r\n      obj = { ...obj, result };\r\n    }\r\n    return obj;\r\n  })\r\n}\r\n\r\nexport const range = (start, stop, step) => Array.from({ length: (stop - start) / step + 1 }, (_, i) => start + (i * step));\r\n\r\nexport const operandsAndResults = computeOperandsAndresultElt(simdFunction);\r\n\r\nexport const constInitialLinkingIndexInstruction = (instructionName) => {\r\n  let operand = operandsAndResults.find(e => e.name == instructionName);\r\n  return operand.result.map(o => [\"inactive\", ...operand.operands.map(e => [])])\r\n}\r\n\r\nexport function insertOperand(opName, opType, opRank, opDimension, aLinkingObject) {\r\n  if (opName === \"r\") {\r\n    let result = opDimension == 0 ? range(0, opDimension, opDimension) : range(0, opDimension - 1, 1);\r\n    let retType = opType;\r\n    let currentInstruction = aLinkingObject.currentInstruction;\r\n    let linkingIndex = aLinkingObject.linkingIndex;\r\n    currentInstruction = { ...currentInstruction, result, retType };\r\n    linkingIndex = result.length == 0 ? result : result.map(e => currentInstruction.operands.length == 0 ? [\"inactive\"] : [\"inactive\", ...range(0, currentInstruction.operands.length - 1, 1).map(n => [])]);\r\n    return { ...aLinkingObject, linkingIndex, currentInstruction }\r\n  }\r\n  else {\r\n\r\n    let currentInstruction = aLinkingObject.currentInstruction;\r\n    let linkingIndex = aLinkingObject.linkingIndex;\r\n    let operands = currentInstruction.operands;\r\n    let types = currentInstruction.types;\r\n    let varnames = currentInstruction.varnames;\r\n    operands.splice(opRank - 1, 0, range(0, opDimension - 1, 1));\r\n    types.splice(opRank - 1, 0, opType);\r\n    varnames.splice(opRank - 1, 0, opName);\r\n    currentInstruction = { ...currentInstruction, operands, types, varnames };\r\n    linkingIndex = constInitialLinkingIndexInstruction(currentInstruction.name);\r\n    return { ...aLinkingObject, linkingIndex, currentInstruction }\r\n  }\r\n}\r\n\r\nexport function deleteOperand(opName, opRank, aLinkingObject) {\r\n  let currentInstruction = aLinkingObject.currentInstruction;\r\n  let linkingIndex = aLinkingObject.linkingIndex;\r\n  let operands = currentInstruction.operands;\r\n  let types = currentInstruction.types;\r\n  let varnames = currentInstruction.varnames;\r\n  if (opName === varnames[opRank - 1]) {\r\n    operands.splice(opRank - 1, 1);\r\n    types.splice(opRank - 1, 1);\r\n    varnames.splice(opRank - 1, 1);\r\n    currentInstruction = { ...currentInstruction, operands, types, varnames };\r\n    linkingIndex = constInitialLinkingIndexInstruction(currentInstruction.name);\r\n    return [{ ...aLinkingObject, linkingIndex, currentInstruction }, opName]\r\n  }\r\n\r\n}\r\n\r\nexport const returnTypeAndParam = (asimdFile) => asimdFile.intrinsic.reduce((acc, cur) => {\r\n  if (cur._rettype) {\r\n    acc = acc.indexOf(cur._rettype) === -1 ? [...acc, cur._rettype] : [...acc];\r\n  }\r\n  if (cur.parameter && Array.isArray(cur.parameter)) {\r\n    cur.parameter.forEach(element => {\r\n      if (element._type) {\r\n        acc = acc.indexOf(element._type) === -1 ? [...acc, element._type] : [...acc];\r\n      }\r\n      return acc\r\n    });\r\n\r\n  }\r\n  return acc\r\n}, []);\r\n\r\nexport function buildMessage(operators, operands) {\r\n  const globalTab = (Array.isArray(operands) && Array.isArray(operators)) ?\r\n    [...operands, ...operators] : (Array.isArray(operators) ?\r\n      operands : (Array.isArray(operators) ? operators : []));\r\n  var message = globalTab.sort((o1, o2) => o1.rank - o2.rank).map(o => {\r\n    if (o.hasOwnProperty(\"idOperand\")) {\r\n\r\n      return document.getElementById(o.idOperand).textContent;\r\n    }\r\n    else if (o.hasOwnProperty(\"idOperator\")) {\r\n      return document.getElementById(o.idOperator).textContent;\r\n    }\r\n\r\n    else {\r\n      return \"\";\r\n    }\r\n  }).join('');\r\n  return message\r\n}\r\n\r\nexport function replaceOperandInMessage(aMessage){\r\n  var reshapedMessage=aMessage;\r\n  if(reshapedMessage){\r\n    reshapedMessage=reshapedMessage.replace(/([A-Z])([0-9]{1,4})/g, (match, p1,p2, offset, string)=>{\r\n      return `<var>${p1}<sub>${p2}</sub></var>`\r\n    });\r\n    \r\n    reshapedMessage= reshapedMessage.replace(/<var>([A-Z])<sub>[0-9]{1,4}<\\/sub><\\/var>\\s+Idx\\s+(<var>[A-Z]<sub>[0-9]{1,4}<\\/sub><\\/var>)/g, (match, p1,p2,offset, string)=>{\r\n            return `<var>${p1}<sub>${p2}</sub></var>`\r\n      });\r\n \r\n  }\r\n     \r\n  return reshapedMessage\r\n  \r\n}\r\n\r\nexport function readLinkingIndexMsg(aLinkingIndex) {//take a linking index and return a message\r\n  var Msge = \"\";\r\n  let indexOfactive = aLinkingIndex.findIndex(e => e[0] == \"active\"); console.log(\"aLinkingIndex\", aLinkingIndex);\r\n  Msge = indexOfactive == -1 ? Msge : aLinkingIndex[indexOfactive].slice(1).flat().sort((a, b) => a[1] - b[1]).reduce((pre, cur) => cur[2] ? [...pre, cur[2], cur[0]] : [...pre, cur[0]], []).join(\" \")\r\n  return Msge\r\n  // const globalTab = (Array.isArray(operands) && Array.isArray(operators)) ?\r\n  //   [...operands, ...operators] : (Array.isArray(operators) ?\r\n  //     operands : (Array.isArray(operators) ? operators : []));\r\n  // var message = globalTab.sort((o1, o2) => o1.rank - o2.rank).map(o => {\r\n  //   if (o.hasOwnProperty(\"idOperand\")) {\r\n\r\n  //     return document.getElementById(o.idOperand).textContent;\r\n  //   }\r\n  //   else if (o.hasOwnProperty(\"idOperator\")) {\r\n  //     return document.getElementById(o.idOperator).textContent;\r\n  //   }\r\n\r\n  //   else {\r\n  //     return \"\";\r\n  //   }\r\n  // }).join('');\r\n  // return message\r\n}\r\n\r\nexport function findCurrentInstructionByName(tableOfInstrinsicsInstructions, instructionName) {\r\n  return tableOfInstrinsicsInstructions.find(e => e.name == instructionName)\r\n}","import React, { Component } from 'react';\r\nimport * as myLib from '../utilities/myLibrary.js';\r\nimport '../styles/CodeText.css';\r\nimport simdFunction from '../utilities/simdFunction.json';\r\n\r\nconst myDataListTab = myLib.constructDataListTable(simdFunction);\r\nconst options=myDataListTab.map((e, i) => <option key={`${e[0]}+${i}`} value={e[0]}>{e[0]}</option>)\r\n\r\n\r\nconst operandsAndResults = myLib.computeOperandsAndresultElt(simdFunction);\r\nconst _mName = simdFunction.intrinsic.find((e, i) => {\r\n    var ex = \"\"\r\n    if (e._rettype) {\r\n        ex = e._rettype == \"_m512\" ? e._rettype : ex;\r\n    }\r\n    if (e.parameter && Array.isArray(e.parameter)) {\r\n        e.parameter.forEach(element => {\r\n            if (element._type) {\r\n                ex = element._type == \"_m512\" ? element._type : ex;\r\n            }\r\n        });\r\n\r\n    }\r\n    if (ex) return e;\r\n    return ex;\r\n});\r\nclass CodeText extends Component {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n    render() {\r\n     \r\n        var  handleOnchange = this.props.handleOnchange, value = this.props.value;\r\n        const description = myDataListTab.find(e => e[0] == value)[3];\r\n        return (\r\n\r\n           <div className='instruction-choice-and-explanation'>\r\n\r\n                <label htmlFor=\"instruction-name-search\"><span className=\"button\">Choose SIMD Instruction</span></label><br />\r\n                <input type=\"search\" id=\"instruction-name-search\" name=\"instruction-name-search\" autoComplete=\"on\"\r\n                    aria-label=\"Search the name of simd instruction\" list=\"myDataListTab\" defaultValue={value}\r\n                    onChange={(e) => handleOnchange(e)}></input>\r\n                <datalist id=\"myDataListTab\">\r\n                    {options}\r\n                </datalist>\r\n               {this.props.isVisible && <div className=\"plain-text-explanation\">\r\n                    {description}\r\n                </div>}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CodeText","export default __webpack_public_path__ + \"static/media/logo.0333e8cd.png\";","import React, { Component } from 'react';\r\nimport * as myLib from '../utilities/myLibrary.js';\r\nimport '../styles/Operand.css';\r\nimport * as _ from \"lodash\";\r\nimport simdFunction from '../utilities/simdFunction.json';\r\n\r\nclass Operand extends Component {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState, snapshot) {\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        var result = this.props.operand.reduce((accumulator, currentValue) => [currentValue, ...accumulator], []);\r\n        var rank = this.props.rank, type = this.props.type;\r\n        const rectOprHeight = 50, rectOprWidth = 80, spaceOprBetween = 10, xOpr0 = \"0\", yOpr0 = \"0\";\r\n        const rectOperandHeight = 20, rectOperandWidth = 20, spaceBetweenOperand = 0.5, xOperand0 = this.props.xPrefixWidth, yOperand0 = \"0\";\r\n        const gOperand = result.map((o, j) => <g key={(type.toLowerCase() + rank) + o} id={(type.toLowerCase() + rank) + o} className={(type.toLowerCase() + rank) + o} onClick={evt => this.props.handleOperandClick(evt)}>\r\n            <rect key={\"recScalar\" + type + (rank + j)} id={\"recScalar\" + type + (rank + j)} className={\"recScalar\" + type + (rank + j)} y={yOperand0 + (rank * (rectOperandHeight + spaceOprBetween))} x={xOperand0 + (j * (rectOperandWidth + spaceBetweenOperand))} width={\"\" + rectOperandWidth}\r\n                height={\"\" + rectOperandHeight}></rect>\r\n            <text key={\"txtScalar\" + type + (rank + j)} id={\"txtScalar\" + type + (rank + j)} className={\"txtScalar\" + type + (rank + j)} dy=\"0 1%\" y={yOperand0 + (rank * spaceOprBetween + (2 * rank + 1) * rectOperandHeight / 2)} dx=\"0 0.07%\" x={xOperand0 +\r\n                (j * (rectOperandWidth + spaceBetweenOperand) + (rectOperandHeight / 2))} dominantBaseline=\"middle\" textAnchor=\"middle\">{String.fromCharCode(65 + rank)}{o}</text>\r\n            </g>)\r\n        return (\r\n            <>\r\n                {gOperand}\r\n                <text key={\"prefixScalar\" + type + rank} id={\"prefixScalar\" + type + rank} className={\"prefixScalar\" + type + rank} y={yOperand0 + (rank * spaceOprBetween + (2 * rank + 1) * rectOperandHeight / 2)} x={this.props.xPrefixWidth / 2} dominantBaseline=\"middle\" textAnchor=\"middle\">{`${this.props.varName}   ${this.props.varType}`}</text>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Operand","import React, { Component } from 'react';\r\nimport * as myLib from '../utilities/myLibrary.js';\r\nimport '../styles/Operands.css';\r\nimport simdFunction from '../utilities/simdFunction.json';\r\nimport Operand from './Operand';\r\n\r\n\r\nclass Operands extends Component {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentDidMount() {;\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n  \r\n    render() {\r\n        const currentInstruction = this.props.currentInstruction, xPrefixWidth=this.props.xPrefixWidth;\r\n        const currentInstructionMember = [...currentInstruction.operands, currentInstruction.result]\r\n        const operands = currentInstructionMember.map((e, i) =>(currentInstructionMember.length - 1 == i)?\r\n                                     <Operand xPrefixWidth={xPrefixWidth} key={i} operand={e} rank={i} handleOperandClick={this.props.handleOperandClick} type={ \"Result\"} varType={currentInstruction.retType} varName=\"r\"></Operand>:\r\n                                                                    <Operand xPrefixWidth={xPrefixWidth} key={i} operand={e} rank={i} handleOperandClick={this.props.handleOperandClick} type={\"Operand\"} varType={currentInstruction.types[i]} varName={currentInstruction.varnames[i]}></Operand>);\r\n        return (\r\n\r\n            <g id=\"operands\" className=\"operands\" transform={\"translate( 0,\" + this.props.translation + \")\"}>\r\n                {operands}\r\n            </g>\r\n        )\r\n    }\r\n}\r\nexport default Operands","import React, { Component } from 'react';\r\nimport * as myLib from '../utilities/myLibrary.js';\r\nimport '../styles/Operator.css';\r\nimport simdFunction from '../utilities/simdFunction.json';\r\n\r\n\r\nconst operators = ['+', 'x', '-', '/', 'mov', ':(int)', 'exp', 'ln', '(', ')','Idx'];\r\n\r\n\r\nclass Operator extends Component {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        var rectOprHeight = this.props.rectOprHeight, rectOprWidth = 35, spaceOprBetween = 17, yOpr0 = \"0\", xOpr0 = this.props.xPrefixWidth;\r\n        const gOperator = operators.map((e, i) => <g key={\"operator\" + i} id={\"operator\" + i} className={\"operator\" + i} onClick={evt => this.props.handleOperatorClick(evt)}>\r\n            <rect key={\"rectOperator\" + i} id={\"rectOperator\" + i} className={\"rectOperator\" + i} x={xOpr0 + (i * (rectOprHeight + spaceOprBetween))} y={yOpr0} width={\"\" + rectOprWidth} height={\"\" + rectOprHeight}></rect>\r\n            <text key={\"txtOperator\" + i} id={\"txtOperator\" + i} className={\"txtOperator\" + i} x={xOpr0 + (i * (rectOprHeight + spaceOprBetween))} dx={\"\" + rectOprWidth / 2} y={yOpr0} dy={\"\" + rectOprWidth / 2} dominantBaseline=\"middle\" textAnchor=\"middle\">{e}</text>\r\n            </g>);\r\n\r\n\r\n\r\n        return (\r\n            <>\r\n                {gOperator}\r\n                <text key={\"prefixOperator\"} id={\"prefixOperator\"} className={\"prefixOperator\"} x={xOpr0/2} y={yOpr0} dy={\"\" + rectOprWidth / 2} dominantBaseline=\"middle\" textAnchor=\"middle\">{\"operator\"}</text>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Operator","import React, { Component } from 'react';\r\nimport * as myLib from '../utilities/myLibrary.js';\r\nimport '../styles/Operations.css';\r\nimport simdFunction from '../utilities/simdFunction.json';\r\nimport Operands from './Operands';\r\nimport Operator from './Operator';\r\n\r\n\r\n\r\nclass Operations extends Component {\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const rectOprHeight = 35, xPrefixWidth=75;\r\n        return (\r\n\r\n        <div id=\"operations\" className=\"operations\">\r\n                <svg id=\"operationsSvg\" className=\"operationsSvg\" width=\"100%\" height=\"100%\" version=\"1.1\"\r\n                    xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\">\r\n                    <Operator xPrefixWidth={xPrefixWidth} rectOprHeight={rectOprHeight} linkingIndex={this.props.linkingIndex} handleOperatorClick={this.props.handleOperatorClick}/>\r\n                    <Operands xPrefixWidth={xPrefixWidth} translation={rectOprHeight + rectOprHeight / 2} currentInstruction={this.props.currentInstruction}\r\n                        linkingIndex={this.props.linkingIndex} handleOperandClick={this.props.handleOperandClick} />\r\n                </svg>\r\n    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Operations","import React, { Component } from 'react';\r\nimport * as myLib from '../utilities/myLibrary.js';\r\nimport '../styles/Explanation.css';\r\nimport * as _ from \"lodash\";\r\nimport '../styles/Explanation.css';\r\nimport parse from 'html-react-parser';\r\nimport simdFunction from '../utilities/simdFunction.json';\r\n\r\nconst alphabethLetters = myLib.range('a'.charCodeAt(0), 'z'.charCodeAt(0), 1).map(x => String.fromCharCode(x));\r\nconst optionOfT=(arrayOfT)=>arrayOfT.map((e, i) =>i===0?<option key={`${e}+${i}`} value=\"\">{e}</option>:<option key={`${e}+${i}`} value={e}>{e}</option>);\r\nconst optionsType=optionOfT([\"--Choose operand type--\",...myLib.returnTypeAndParam(simdFunction)]);\r\n\r\nclass Explanation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.currentResult = null;\r\n        this.butonMsg = null;\r\n\r\n\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n    }\r\n\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.value !== prevProps.value||_.isEqual(this.props.linkingIndex, prevProps.linkingIndex)) {\r\n            this.currentResult = this.props.currentResult\r\n            this.butonMsg = myLib.readLinkingIndexMsg(this.props.linkingIndex);\r\n        }\r\n\r\n    }\r\n\r\n    componentWillUnmount() {\r\n\r\n    }\r\n\r\n\r\n    render() {console.log()\r\n        let availableLetters =this.props.currentInstruction.operands.length===0?alphabethLetters: alphabethLetters.filter(x => !this.props.currentInstruction.varnames.includes(x));\r\n        let availableName=this.props.currentInstruction.operands.length===0?[...this.props.deletedName, ...availableLetters]:[...this.props.deletedName, ...availableLetters].filter(x => !this.props.currentInstruction.varnames.includes(x));\r\n        let optionsName =optionOfT([\"--Choose operand name--\",...availableName]) \r\n        var canBeDeletedName =this.props.currentInstruction.varnames ;\r\n        var optionNameToDelete =optionOfT([\"--Operand name to delete--\",...canBeDeletedName]);\r\n        var canBeDeletedRank = myLib.range(1, this.props.currentInstruction.operands.length, 1);\r\n        var optionRankToDelete = optionOfT([\"--Operand rank to delete--\",...canBeDeletedRank]);\r\n        let canBeInsertRank = this.props.msgToUser.Name.Name?( this.props.msgToUser.Name.Name!==\"r\"?(this.props.currentInstruction.result.length === 0 ? myLib.range(1, this.props.currentInstruction.operands.length, 1) : myLib.range(1, this.props.currentInstruction.operands.length + 1, 1)):\r\n        (this.props.currentInstruction.result.length === 0 ? myLib.range(this.props.currentInstruction.operands.length+1, this.props.currentInstruction.operands.length+1, 1) : myLib.range(this.props.currentInstruction.operands.length + 2, this.props.currentInstruction.operands.length + 2, 1))):\r\n        (this.props.currentInstruction.result.length === 0 ? myLib.range(1, this.props.currentInstruction.operands.length+1, 1) : myLib.range(1, this.props.currentInstruction.operands.length + 2, 1));\r\n        \r\n        var optionRankToInsert = optionOfT([\"--Choose operand rank--\",...canBeInsertRank]);\r\n        var dimension = [0,...myLib.range(0, 10, 1).map(e=>2**e)];\r\n        var optionDimension = optionOfT([\"--Choose operand dimension--\",...dimension]); \r\n        var insertField = <div className='insert-operand'>\r\n            <label htmlFor=\"type-of-operand-to-insert\"><span className=\"button-insert\"></span></label>\r\n            <select id=\"type-of-operand-to-insert\" form=\"explanationForm\" name=\"type-of-operand-to-insert\" autoComplete=\"on\" required\r\n              onChange={(evt) => this.props.handleTypeOfOperandChange(evt)}>\r\n                {optionsType}\r\n            </select><br />\r\n            <label htmlFor=\"name-of-operand-to-insert\"><span className=\"button-insert\"></span></label>\r\n            <select id=\"name-of-operand-to-insert\" form=\"explanationForm\" name=\"name-of-operand-to-insert\" autoComplete=\"on\" required\r\n            onChange={(evt) => this.props.handleNameOfOperandChange(evt)}>\r\n                {optionsName}\r\n            </select><br />\r\n            <label htmlFor=\"rank-of-operand-to-insert\"><span className=\"button-insert\"></span></label>\r\n            <select id=\"rank-of-operand-to-insert\" form=\"explanationForm\" name=\"rank-of-operand-to-insert\" autoComplete=\"on\"\r\n                required onChange={(evt) => this.props.handleRankOfOperandChange(evt)}>\r\n                {optionRankToInsert}\r\n            </select>\r\n            <br />\r\n            <label htmlFor=\"dimension-of-operand-to-insert\"><span className=\"button-dimension\"></span></label>\r\n            <select id=\"dimension-of-operand-to-insert\" form=\"explanationForm\" name=\"dimension-of-operand-to-insert\" autoComplete=\"on\"\r\n                required onChange={(evt) => this.props.handleDimensionOfOperandChange(evt)}>\r\n                {optionDimension}\r\n            </select>{/* <output id=\"rankOutput\" className=\"rankOutput\" name=\"outputRank\" form=\"explanationForm\" >\r\n                {this.props.msgToUser.Dimension}\r\n            </output> */}\r\n        </div>\r\n        var deleteField = <div className='delete-operand'>\r\n            <label htmlFor=\"name-of-operand-to-delete\"><span className=\"button-delete\"></span></label>\r\n            <select id=\"name-of-operand-to-delete\" form=\"explanationForm\" name=\"name-of-operand-to-delete\" autoComplete=\"on\"\r\n                required onChange={(evt) => this.props.handleNameOfOperandChange(evt)}>\r\n                {optionNameToDelete}\r\n            </select>\r\n            <br />\r\n            <label htmlFor=\"rank-of-operand-to-delete\"><span className=\"button-delete\"></span></label>\r\n            <select id=\"rank-of-operand-to-delete\" name=\"rank-of-operand-to-delete\" autoComplete=\"on\"\r\n                required onChange={(evt) => this.props.handleRankOfOperandChange(evt)}>\r\n                {optionRankToDelete}\r\n            </select>\r\n\r\n        </div>\r\n        this.butonMsg = myLib.readLinkingIndexMsg(this.props.linkingIndex);\r\n       this.butonMsg=myLib.replaceOperandInMessage(this.butonMsg);\r\n       // this.butonMsg='<var>A<sub><var>B<sub>10</sub></var></sub></var>';\r\n        console.log(\"msg \",this.props.currentResult ,\" Modified Msg \",myLib.replaceOperandInMessage(this.props.currentResult) );\r\n        this.currentResult = this.props.currentResult?myLib.replaceOperandInMessage(this.props.currentResult):this.props.currentResult;\r\n        if (this.props.clickedButton) {\r\n            this.deletedButtonState =1;// this.props.clickedButton === \"deleteOperandButton\";\r\n            this.insertButtonState = 1;\r\n            this.groupButtonState = 1;\r\n            this.partButtonState = 1;\r\n        }\r\n\r\n\r\n        return (\r\n\r\n\r\n            <div id=\"explanation\" className=\"explanation\">\r\n                <form id=\"explanationForm\" className=\"explanationForm\">\r\n                    <p id=\"outputParagraph\" className=\"outputParagraph\">\r\n                        <label>{this.currentResult && `How to compute the field  `}</label>\r\n                        <output id=\"simdOutput\" className=\"simdOutput\" name=\"outputSimd\" form=\"explanationForm\" >\r\n                        {this.currentResult && <span id=\"fieldFormul\" className=\"fieldFormul\"> {parse(this.currentResult)}:  </span>}{this.currentResult?<span id=\"textFormul\" className=\"textFmormul\"> {parse(this.currentResult)} = {parse(this.butonMsg)}</span>:\r\n                        \"Click on a result field to see its calculation explained\"}\r\n                        </output>\r\n                    </p>\r\n                    <p id=\"buttonParagraph\" className=\"buttonParagraph\">\r\n                        {this.currentResult && <button id=\"simdButton\" className=\"simdButton\" form=\"explanationForm\" type=\"button\" onClick={evt => this.props.handlesimdButtonClick(evt)}>\r\n                            Reset the field {parse(this.currentResult)}  \r\n                        </button>}\r\n                    </p>\r\n                    <p id=\"buttonManageVectorOperands\" className=\"buttonManageVectorOperands\">\r\n                        {this.insertButtonState && <button id=\"insertOperandButton\" className=\"insertOperandButton\" form=\"explanationForm\" type=\"button\" onClick={evt => this.props.handleInsertClick(evt)}>\r\n                            Insert an operand\r\n                        </button>}<br /><br />\r\n                        {this.deletedButtonState && < button id=\"deleteOperandButton\" className=\"deleteOperandButton\" form=\"explanationForm\" type=\"button\" onClick={evt => this.props.handleDeleteClick(evt)}>\r\n                            Delete an operand\r\n                        </button>}<br /><br />\r\n                        <button id=\"groupOperandsButton\" className=\"groupOperandsButton\" form=\"explanationForm\" type=\"button\" onClick={evt => this.props.handleGroupClick(evt)}>\r\n                            Group selected scalar operands\r\n                        </button><br /><br />\r\n                        <button id=\"partOperandsButton\" className=\"partOperandsButton\" form=\"explanationForm\" type=\"button\" onClick={evt => this.props.handlePartClick(evt)}>\r\n                            Part selected scalar operands\r\n                        </button>\r\n                    </p>\r\n                    {insertField}{deleteField}\r\n                </form>\r\n            </div>\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default Explanation","import React, { Component } from 'react';\r\nimport * as myLib from '../utilities/myLibrary.js';\r\nimport * as _ from \"lodash\";\r\nimport simdFunction from '../utilities/simdFunction.json';\r\nimport styled from 'styled-components'\r\nimport logo from '../assets/logo.png';\r\nimport '../styles/App.css';\r\nimport CodeText from './CodeText';\r\nimport Operations from './Operations';\r\nimport Explanation from './Explanation';\r\n//import Visualization from './Visualization';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n`\r\n\r\nconst LeftContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh\r\n  width: 50vw;\r\n  overflow: auto;\r\n`\r\n\r\nconst RightContainer = styled.div`\r\n  width: 50vw;\r\n  height: 100vh;\r\n  overflow: hidden;\r\n`\r\nconst myDataListTab = myLib.constructDataListTable(simdFunction);\r\n\r\n\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: \"_mm_add_epi8\", isVisible: true, currentOperator: null, currentResult: null, linkingIndexTable: [{\r\n        linkingIndex: myLib.constInitialLinkingIndexInstruction(\"_mm_add_epi8\"),\r\n        currentInstruction: myLib.findCurrentInstructionByName(myLib.operandsAndResults, \"_mm_add_epi8\")\r\n      }], clickedButton: 1, msgToUser: { Type: { Type: null, state: false }, Name: { Name: null, state: false }, Rank: { Rank: null, state: false }, Dimension: { Dimension: null, state: false } },\r\n      deletedName: []\r\n    };\r\n    this.handleOperandClick = this.handleOperandClick.bind(this);\r\n    this.handleOnchange = this.handleOnchange.bind(this);\r\n    this.handleDimensionOfOperandChange = this.handleDimensionOfOperandChange.bind(this);\r\n    this.handleInsertClick = this.handleInsertClick.bind(this);\r\n    this.handleDeleteClick = this.handleDeleteClick.bind(this);\r\n    this.handleGroupClick = this.handleGroupClick.bind(this);\r\n    this.handlePartClick = this.handlePartClick.bind(this);\r\n    this.handleGroupPartSelect = this.handleGroupPartSelect.bind(this);\r\n    this.handleNameOfOperandChange = this.handleNameOfOperandChange.bind(this);\r\n    this.handleTypeOfOperandChange = this.handleTypeOfOperandChange.bind(this);\r\n    this.handleRankOfOperandChange = this.handleRankOfOperandChange.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n\r\n  }\r\n  handleOnchange(evt) {\r\n    if (myDataListTab.find(o => o[0] == evt.target.value)) {\r\n      var linkingIndexTable = this.state.linkingIndexTable\r\n      if (!(linkingIndexTable.find(e => e.currentInstruction.name === evt.target.value))) {\r\n        let newLinkinIndexObject = { linkingIndex: myLib.constInitialLinkingIndexInstruction(evt.target.value), currentInstruction: myLib.findCurrentInstructionByName(myLib.operandsAndResults, evt.target.value) }\r\n        linkingIndexTable = linkingIndexTable.map(e => ({ linkingIndex: e.linkingIndex.map(o => o.fill(\"inactive\", 0, 1)), currentInstruction: e.currentInstruction }))\r\n        linkingIndexTable = [...linkingIndexTable, newLinkinIndexObject]\r\n      }\r\n      else {\r\n        let indexOfLinkingIndex = linkingIndexTable.findIndex(e => e.currentInstruction.name === evt.target.value);\r\n        let newLinkinIndexObject = { linkingIndex: linkingIndexTable[indexOfLinkingIndex].linkingIndex.map(o => o.fill(\"inactive\", 0, 1)), currentInstruction: linkingIndexTable[indexOfLinkingIndex].currentInstruction };\r\n        linkingIndexTable = linkingIndexTable.fill(newLinkinIndexObject, indexOfLinkingIndex, indexOfLinkingIndex + 1);\r\n\r\n      }\r\n      this.setState(prevState => ({\r\n        linkingIndexTable: linkingIndexTable,\r\n        currentOperator: null,\r\n        currentResult: null,\r\n        value: evt.target.value,\r\n        isVisible: true\r\n      }));\r\n\r\n    }\r\n    else {\r\n      this.setState(prevState => ({\r\n        isVisible: null\r\n      }));\r\n    }\r\n  }\r\n  handleOperandClick = (evt) => {//To handle both operand and result clickS\r\n    var linkingIndexTable = this.state.linkingIndexTable; console.log(\"linkingIndexTable op\", linkingIndexTable)\r\n    let indexOfcurrentInstruction = linkingIndexTable.findIndex(e => e.currentInstruction.name === this.state.value);\r\n    var currentInstructionR = linkingIndexTable[indexOfcurrentInstruction].currentInstruction.result.reduce((accumulator, currentValue) => [currentValue, ...accumulator], []);//just to reverse\r\n    if (evt.currentTarget.id.includes(\"result\")) {//result has been clicked\r\n      let number = evt.currentTarget.textContent;\r\n      let indexR = currentInstructionR.findIndex(e => (String.fromCharCode(65 + linkingIndexTable[indexOfcurrentInstruction].currentInstruction.operands.length) + e) == number);\r\n      linkingIndexTable[indexOfcurrentInstruction].linkingIndex = linkingIndexTable[indexOfcurrentInstruction].linkingIndex.map((e, i) => i == indexR ? e.map((x, j) => j == 0 ? \"active\" : x) : e.map((x, j) => j == 0 ? \"inactive\" : x));\r\n      indexR > -1 && this.setState(prevState => ({\r\n        currentResult: number,\r\n        linkingIndexTable: linkingIndexTable\r\n      }));\r\n    }\r\n    var currentInstructionO = linkingIndexTable[indexOfcurrentInstruction].currentInstruction.operands.map(e => e.reduce((accumulator, currentValue) => [currentValue, ...accumulator], []));//just to reverse\r\n    if (evt.currentTarget.id.includes(\"operand\")) {//operand has been clicked\r\n      let number = evt.currentTarget.textContent;\r\n      var indexO = null;\r\n\r\n      let indexOfOperand = currentInstructionO.findIndex((e, i) => {\r\n        indexO = e.indexOf(e.find(o => (String.fromCharCode(65 + i) + o) == number))\r\n        return indexO != -1\r\n      })\r\n      let indexOfResult = linkingIndexTable[indexOfcurrentInstruction].linkingIndex.findIndex(e => e[0] == \"active\");\r\n      if (indexOfResult != -1) {\r\n        if (!linkingIndexTable[indexOfcurrentInstruction].linkingIndex[indexOfResult].some(e => Array.isArray(e) && e.length != 0)) {\r\n          linkingIndexTable[indexOfcurrentInstruction].linkingIndex[indexOfResult][indexOfOperand + 1] = [[number, 0, this.state.currentOperator], ...linkingIndexTable[indexOfcurrentInstruction].linkingIndex[indexOfResult][indexOfOperand + 1]];\r\n          this.setState(prevState => ({\r\n            currentOperator: null,\r\n            linkingIndexTable: linkingIndexTable\r\n          }));\r\n        }\r\n        else {\r\n          if (this.state.currentOperator) {\r\n            const g = (anArray, anIndex) => anArray[anIndex].reduce((acc, ov, id, alik2) => id != 0 && ov.length != 0 ? [...ov.map(x => x[1]), ...acc] : [...acc], [])\r\n            var indexOfMaxRankArray\r\n            var maxRank = Math.max(...g(linkingIndexTable[indexOfcurrentInstruction].linkingIndex, indexOfResult)) //The current maximun rank of contribution to the current result field\r\n\r\n            // const operationIdx=(anArray,anIndex)=>anArray[anIndex].findIndex((e, i) => Array.isArray(e) && e.length != 0 && e.findIndex((o, j) => o.indexOf(Math.max(...g(anArray,anIndex))) != -1) != -1)\r\n\r\n            const operationIdx = (anArray, anIndex) => anArray[anIndex].findIndex((e, i) => {\r\n              if (Array.isArray(e) && e.length != 0) {\r\n                indexOfMaxRankArray = e.findIndex((o, j) => o.indexOf(Math.max(...g(anArray, anIndex))) != -1)\r\n                return indexOfMaxRankArray != -1\r\n              }\r\n            })\r\n            var indexOperand = operationIdx(linkingIndexTable[indexOfcurrentInstruction].linkingIndex, indexOfResult);//The index of the operand currently bearing the array of contribution to current result field with the maximun rank\r\n            linkingIndexTable[indexOfcurrentInstruction].linkingIndex[indexOfResult][indexOfOperand + 1] = [[number, maxRank + 1, this.state.currentOperator], ...linkingIndexTable[indexOfcurrentInstruction].linkingIndex[indexOfResult][indexOfOperand + 1]];\r\n            this.setState(prevState => ({\r\n              currentOperator: null,\r\n              linkingIndexTable: linkingIndexTable\r\n            }));\r\n          }\r\n\r\n\r\n        }\r\n      }\r\n\r\n    }\r\n\r\n  }\r\n  handleOperatorClick = (evt) => {//To handle both Operator clickS\r\n    var linkingIndexTable = this.state.linkingIndexTable;\r\n    let indexOfcurrentInstruction = linkingIndexTable.findIndex(e => e.currentInstruction.name === this.state.value);\r\n    let indexOfResult = linkingIndexTable[indexOfcurrentInstruction].linkingIndex.findIndex(e => e[0] == \"active\");\r\n    let operator = evt.currentTarget.textContent;\r\n    if (indexOfResult !== -1) {\r\n      this.setState(prevState => ({\r\n        currentOperator: operator\r\n      }));\r\n    }\r\n  }\r\n\r\n  handlesimdButtonClick = (evt) => {\r\n    var linkingIndexTable = this.state.linkingIndexTable;\r\n    let indexOfcurrentInstruction = linkingIndexTable.findIndex(e => e.currentInstruction.name === this.state.value);\r\n    linkingIndexTable[indexOfcurrentInstruction].linkingIndex = linkingIndexTable[indexOfcurrentInstruction].linkingIndex.map(e => e[0] == \"active\" ? e.fill([], 1) : e);\r\n    this.setState(prevState => ({\r\n      currentOperator: null,\r\n      linkingIndexTable: linkingIndexTable\r\n    }));\r\n\r\n  }\r\n\r\n  handleDimensionOfOperandChange = (evt) => {\r\n    console.log(\"this.state.msgToUser.Dimension \", this.state.msgToUser.Dimension);\r\n    let Dimension = { Dimension: evt.target.value, state: true };\r\n    this.setState(prevState => ({\r\n      msgToUser: { ...prevState.msgToUser, Dimension }\r\n    })); console.log(\"this.state.msgToUser.Dimension \", this.state.msgToUser.Dimension);\r\n  }\r\n\r\n  handleNameOfOperandChange = (evt) => {\r\n    if (evt.target.value === \"r\") {\r\n      let indexOfLinkingIndex = this.state.linkingIndexTable.findIndex(e => e.currentInstruction.name === this.state.value);\r\n      let RankV = this.state.linkingIndexTable[indexOfLinkingIndex].currentInstruction.result.length === 0 ? this.state.linkingIndexTable[indexOfLinkingIndex].currentInstruction.operands + 1 :\r\n        this.state.linkingIndexTable[indexOfLinkingIndex].currentInstruction.operands.length + 2;\r\n      let Rank = { Rank: RankV, state: this.state.msgToUser.Rank.state }\r\n      let Name = { Name: evt.target.value, state: true };\r\n      this.setState(prevState => ({\r\n        msgToUser: { ...prevState.msgToUser, Name }\r\n      }));\r\n\r\n    }\r\n    else {\r\n      let Name = { Name: evt.target.value, state: true };\r\n      this.setState(prevState => ({\r\n        msgToUser: { ...prevState.msgToUser, Name }\r\n      }));\r\n    }\r\n\r\n  }\r\n\r\n  handleTypeOfOperandChange = (evt) => {\r\n    let Type = { Type: evt.target.value, state: true };\r\n    this.setState(prevState => ({\r\n      msgToUser: { ...prevState.msgToUser, Type }\r\n    }))\r\n  }\r\n\r\n  handleRankOfOperandChange = (evt) => {\r\n    let indexOfLinkingIndex = this.state.linkingIndexTable.findIndex(e => e.currentInstruction.name === this.state.value);\r\n    if (((evt.target.value === this.state.linkingIndexTable[indexOfLinkingIndex].currentInstruction.operands + 2) && this.state.linkingIndexTable[indexOfLinkingIndex].currentInstruction.result.length !== 0)\r\n      || ((evt.target.value === this.state.linkingIndexTable[indexOfLinkingIndex].currentInstruction.operands + 1) && this.state.linkingIndexTable[indexOfLinkingIndex].currentInstruction.result.length === 0)) {\r\n      let Rank = { Rank: evt.target.value, state: true };\r\n      let Name = { Name: \"r\", state: this.state.msgToUser.Name.state };\r\n      this.setState(prevState => ({\r\n        msgToUser: { ...prevState.msgToUser, Rank }\r\n      }))\r\n    }\r\n    else {\r\n      let Rank = { Rank: evt.target.value, state: true };\r\n      this.setState(prevState => ({\r\n        msgToUser: { ...prevState.msgToUser, Rank }\r\n      }));\r\n    }\r\n\r\n  }\r\n\r\n  handleInsertClick = (evt) => {\r\n    var deletedName = this.state.deletedName;\r\n    var linkingIndexTable = this.state.linkingIndexTable;\r\n    var msgToUser = this.state.msgToUser;\r\n    if (msgToUser.Name.state && msgToUser.Type.state && msgToUser.Rank.state && msgToUser.Dimension.state) {\r\n      let indexOfLinkingIndex = linkingIndexTable.findIndex(e => e.currentInstruction.name === this.state.value);\r\n      let modifiedCurrentInstruction = myLib.insertOperand(msgToUser.Name.Name, msgToUser.Type.Type, msgToUser.Rank.Rank, msgToUser.Dimension.Dimension, linkingIndexTable[indexOfLinkingIndex]);\r\n      deletedName = _.isEqual(linkingIndexTable[indexOfLinkingIndex], modifiedCurrentInstruction) ? deletedName : deletedName.filter(x => x !== msgToUser.Name.Name);\r\n      linkingIndexTable[indexOfLinkingIndex] = modifiedCurrentInstruction;\r\n\r\n    }\r\n    this.setState(prevState => ({\r\n      deletedName: deletedName,\r\n      clickedButton: evt.target.id,\r\n      linkingIndexTable: linkingIndexTable,\r\n      currentResult: null,\r\n      msgToUser: { Type: { Type: null, state: false }, Name: { Name: null, state: false }, Rank: { Rank: null, state: false }, Dimension: { Dimension: null, state: false } }\r\n    }));\r\n\r\n  }\r\n\r\n  handleDeleteClick = (evt) => {\r\n    var deletedName = this.state.deletedName;\r\n    var linkingIndexTable = this.state.linkingIndexTable;\r\n    var msgToUser = this.state.msgToUser;\r\n    if (msgToUser.Name.state && msgToUser.Rank.state) {\r\n      let indexOfLinkingIndex = linkingIndexTable.findIndex(e => e.currentInstruction.name === this.state.value);\r\n      let modifiedCurrentInstruction = myLib.deleteOperand(msgToUser.Name.Name, msgToUser.Rank.Rank, linkingIndexTable[indexOfLinkingIndex]);\r\n      linkingIndexTable[indexOfLinkingIndex] = modifiedCurrentInstruction[0];\r\n      deletedName = [modifiedCurrentInstruction[1], ...deletedName]\r\n    }\r\n    this.setState(prevState => ({\r\n      deletedName: deletedName,\r\n      clickedButton: evt.target.id,\r\n      linkingIndexTable: linkingIndexTable,\r\n      currentResult: null,\r\n      msgToUser: { Type: { Type: null, state: false }, Name: { Name: null, state: false }, Rank: { Rank: null, state: false }, Dimension: { Dimension: null, state: false } }\r\n    }));\r\n  }\r\n  handleGroupClick = (evt) => {\r\n\r\n  }\r\n\r\n  handlePartClick = (evt) => {\r\n\r\n  }\r\n  handleGroupPartSelect = (evt) => {\r\n    //console.log(\"evtTarget select\", evt.target, \"evt.currentTarget select\", evt.currentTarget)\r\n  }\r\n\r\n  render() {\r\n    console.log(\"linkingIndextable\", this.state.linkingIndexTable);\r\n    let indexOfLinkingIndex = this.state.linkingIndexTable.findIndex(e => e.currentInstruction.name == this.state.value);\r\n    let linkingIndex = this.state.linkingIndexTable[indexOfLinkingIndex].linkingIndex;\r\n    let currentInstruction = this.state.linkingIndexTable[indexOfLinkingIndex].currentInstruction;\r\n    return (\r\n\r\n      <div id=\"application\" className=\"application\">\r\n        <div id=\"codeTextExplanation\" className=\"codeTextExplanation\">\r\n          <div id=\"codeText\" className=\"codeText\">\r\n            <CodeText handleOnchange={this.handleOnchange} value={this.state.value} isVisible={this.state.isVisible} />\r\n          </div>\r\n          <div id=\"explanation\" className=\"explanation\">\r\n            {this.state.isVisible && <Explanation value={this.state.value} handlesimdButtonClick={this.handlesimdButtonClick} linkingIndex={linkingIndex} msgToUser={this.state.msgToUser} deletedName={this.state.deletedName}\r\n              currentOperator={this.state.currentOperator} currentResult={this.state.currentResult} currentInstruction={currentInstruction} clickedButton={this.state.clickedButton}\r\n              handleDimensionOfOperandChange={this.handleDimensionOfOperandChange} handleRankOfOperandChange={this.handleRankOfOperandChange} handleTypeOfOperandChange={this.handleTypeOfOperandChange}\r\n              handleNameOfOperandChange={this.handleNameOfOperandChange} handleInsertClick={this.handleInsertClick} handleDeleteClick={this.handleDeleteClick} handleGroupClick={this.handleGroupClick} handlePartClick={this.handlePartClick} />}\r\n          </div>\r\n        </div>\r\n        <div id=\"operation\" className=\"operation\">\r\n          {this.state.isVisible && <Operations value={this.state.value} currentInstruction={currentInstruction} linkingIndex={linkingIndex}\r\n            handleOperandClick={this.handleOperandClick} handleOperatorClick={this.handleOperatorClick} />}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <HashRouter basename={process.env.PUBLIC_URL}>\r\n      <Switch>\r\n          <Route exact path='/' component={App}/>\r\n          <Route path='/link/:code' component={App}/>\r\n      </Switch>\r\n  </HashRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}